{"version":3,"sources":["socket.js","classes/Cell.js","types/Theme.js","types/PieceTypes.js","types/Color.js","classes/Board.js","classes/Piece.js","classes/pieces/Pawn.js","classes/pieces/Rook.js","classes/pieces/Knight.js","classes/pieces/Bishop.js","classes/pieces/Queen.js","classes/pieces/King.js","index.js","node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["socket","io","connect","on","data","console","log","Cell","piece","selected","availableMove","Theme","PieceTypes","king","queen","rook","bishop","knight","pawn","Color","light","dark","Board","width_board","height_board","files","ranks","theme","pieceTheme","cell_width","cell_height","piece_offset","previousCell","selectedCells","posibleMoves","currentPlayer","THEME","previousPlayer","boardMove","$canvas","document","createElement","ctx","getContext","width","height","body","appendChild","boardMatrix","i","j","setMouseCell","bind","setSelectedCell","pickPiece","dropPiece","dragPiece","addEventListener","e","clearSelections","offsetX","offsetY","mouseCoordinatesToCell","file","rank","selectedCell","color","cellKing","getKing","isCheck","availableMovements","type","PIECES","push","setSelected","renderBoard","clearPosibleMoves","setPiece","shortCastle","longCastle","moved","auxCurrentPlayer","cell","selectedCellRockShortWhite","selectedCastle","selectedNewCellRock","selectedCellRockLongWhite","forEach","celda","setAvailableMovement","Math","floor","drawI","drawJ","rectColor","textColor","fillStyle","fillRect","textBaseline","textAlign","font","fillText","strokeStyle","lineWidth","strokeRect","globalAlpha","beginPath","arc","PI","fill","renderPiece","Piece","position","direction","iDir","jDir","k","length","getCellFromCoords","Pawn","cellsPossiblesMoves","cellPossibleMove","cellPossibleMoveTakeLeft","cellPossibleMoveTakeRight","cellPossibleMoveStart","Rook","checkDirection","checkKingDirection","alert","Knight","possibleMoves","Bishop","Queen","King","directions","isThreatCell","cellCastleKingShort","cellCastleShortRook","cellCastleKingLong","cellCastleLongRook","l","WIDTH_CANVAS","HEIGHT_CANVAS","FILES","RANKS","board","printPawns","initPlacePiece","printPieces","OVERLAY_ID","OldModule","module","bundle","Module","moduleName","call","hot","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","event","JSON","parse","handled","assets","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","id","every","generated","js","clear","hmrApply","v","hmrAcceptRun","reload","close","onclose","removeErrorOverlay","error","message","stack","overlay","createErrorOverlay","getElementById","remove","stackTrace","innerText","innerHTML","getParents","modules","parents","d","dep","Array","isArray","concat","Function","deps","cached","cache","some","cb"],"mappings":"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","file":"app.e31bb0bc.js","sourceRoot":"..","sourcesContent":["\r\n/*** SOCKET ***/\r\nconst socket = io.connect('http://localhost');\r\n\r\nsocket.on('connected', (data) => {\r\n    console.log({data});\r\n});\r\n\r\nexport {socket};","class Cell {\r\n    /**\r\n     * @type {Piece} piece = Pieza que es encuentra en esa celda\r\n     */\r\n    piece;\r\n\r\n    /**\r\n     * @type {boolean} selected = Indica la pieza seleccionada (proporcionada por el tablero)\r\n     */\r\n    selected;\r\n\r\n    /**\r\n     * @type {boolean} availableMove = Inica si es posible realizar un movimiento o no\r\n     */\r\n    availableMove;\r\n\r\n    /**\r\n     * \r\n     * @param {Piece} piece Pieza del tablero\r\n     */\r\n    constructor(piece){\r\n        this.piece = piece;\r\n        this.selected = false;\r\n        this.availableMove = false;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {boolean} selected Pieza seleccionada\r\n     */\r\n    setSelected(selected){\r\n        this.selected = selected;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Piece} piece Pieza que queremos introducir en la celda\r\n     */\r\n    setPiece(piece){\r\n        this.piece = piece;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {boolean} availableMove \r\n     */\r\n     setAvailableMovement(availableMove){\r\n        this.availableMove = availableMove;\r\n    }\r\n}\r\n\r\nexport {Cell}","class Theme{\r\n    dark;\r\n    light;\r\n}\r\n\r\nexport {Theme}","class PieceTypes {\r\n\r\n    /*** PIEZAS AJEDREZ ***/\r\n    \r\n        /**\r\n         * @type {object} PIECES = variable estática para todas las piezas\r\n         */\r\n        static PIECES = {\r\n            king: 'k',\r\n            queen: 'q',\r\n            rook: 'r',\r\n            bishop: 'b',\r\n            knight: 'n',\r\n            pawn: 'p',\r\n        }\r\n\r\n    /*** --PIEZAS AJEDREZ-- ***/\r\n\r\n}\r\n\r\nexport {PieceTypes}","class Color {\r\n\r\n    static THEME = {\r\n        light: 'light',\r\n        dark: 'dark'\r\n    }\r\n\r\n}\r\n\r\nexport {Color}","import {Cell} from './Cell.js'\r\nimport {Theme} from '../types/Theme.js'\r\nimport {PieceTypes} from '../types/PieceTypes.js';\r\nimport {Color} from '../types/Color.js';\r\n\r\nclass Board{\r\n    /**\r\n    * @type {integer} width_board = Anchura del canvas\r\n    * @type {integer} height_board = Altura del canvas\r\n    */\r\n    width_board;\r\n    height_board;\r\n\r\n    /**\r\n    * @type {integer} files = Filas del TABLERO\r\n    * @type {integer} ranks = Columnas del TABLERO\r\n    */\r\n    files;\r\n    ranks;\r\n\r\n    /**\r\n    * @type {Theme} theme = Theme del tablero\r\n    * @type {Theme} pieceTheme = Theme de las piezas\r\n    */\r\n    theme;\r\n    pieceTheme;\r\n\r\n    /**\r\n    * @type {integer} cell_width = Tamaño de cada celda del tablero\r\n    * @type {integer} cell_height = Altura de cada celda del tablero\r\n    */\r\n    cell_width;\r\n    cell_height;\r\n\r\n    /**\r\n    * @type {integer}  piece_offset = Offset de la pieza en el tablero para centrarlas hacia abajo\r\n    */\r\n    piece_offset;\r\n\r\n    /**\r\n    * @type {Cell} previousCell = Celda anterior para poder eliminar la ficha una vez movida \r\n    */\r\n    previousCell;\r\n\r\n    /**\r\n    * @type {Array.<Cell>} selectedCells = Array de Cells que guarda las casillas seleccionadas\r\n    */\r\n    selectedCells;\r\n\r\n    /**\r\n     * @type {Array.<Cell>} posibleMoves = Array de Cells para guardar las casillas con posibles movimientos para las piezas\r\n     */\r\n    posibleMoves;\r\n\r\n    /**\r\n    * @type {Cell} boardMatrix = Tablero \r\n    */\r\n    boardMatrix;\r\n\r\n    /**\r\n     * @type {string} currentPlayer = Indica el color del actual jugador\r\n     * @type {string} previousPlayer = Indica el color del anterior jugador\r\n     */\r\n    currentPlayer;\r\n    previousPlayer;\r\n\r\n    /**\r\n    * @type {HTMLCanvasElement} $canvas = Canvas sobre el que dibujamos el juego\r\n    * @type {CanvasRenderingContext2D} ctx = Contexto 2d del canvas \r\n    */\r\n    $canvas;\r\n    ctx;\r\n\r\n    /**\r\n     * @type {boolean} boardMove = Indica si el tablero se tiene que girar o no\r\n     */\r\n    boardMove;\r\n\r\n    /**\r\n     * \r\n     * @param width_board \r\n     * @param height_board \r\n     * @param files \r\n     * @param ranks \r\n     * @param theme \r\n     */\r\n\r\n    constructor(width_board, height_board, files, ranks, theme, pieceTheme){\r\n        /* Inicializamos el tamaño y la altura del tablero */\r\n        this.width_board = width_board;\r\n        this.height_board = height_board;\r\n\r\n        /* Inicializamos las filas y columnas del tablero */\r\n        this.files = files;\r\n        this.ranks = ranks;\r\n\r\n        /* Inicializamos el tema del tablero y de las piezas */\r\n        this.theme = theme;\r\n        this.pieceTheme = pieceTheme;\r\n\r\n        /* Inicializamos el tamaño y la altura de las celdas del tablero */\r\n        this.cell_width = this.width_board / this.files;\r\n        this.cell_height = this.height_board / this.ranks;\r\n\r\n        /* Inicializamos el Offset que tenemos en cada celda de la pieza para poder centrarla */\r\n        this.piece_offset = this.cell_height * 0.05;\r\n\r\n        /* Inicialzamos la celda a null para una vez seleccionada una pieza modificarla */\r\n        this.previousCell = null;\r\n\r\n        /* Inicializamos el array de celdas seleccionadas */\r\n        this.selectedCells = [];\r\n\r\n        /* Inicializamos el array de posibles movimientos */\r\n        this.posibleMoves = [];\r\n\r\n        /* Inicializamos el actual jugador y el previo para poder alternarlos */\r\n        this.currentPlayer = Color.THEME.light;\r\n        this.previousPlayer = Color.THEME.dark;\r\n\r\n        /* Inicializamos el movimiento de tablero en true para pintarlo con las blancas abajo */\r\n        this.boardMove = false;\r\n\r\n        /* Canvas */\r\n        this.$canvas = document.createElement('canvas');\r\n        this.ctx = this.$canvas.getContext('2d');\r\n\r\n        this.$canvas.width = this.width_board;\r\n        this.$canvas.height = this.height_board;\r\n\r\n        /* Introducimos el canvas en el body del documento */\r\n        document.body.appendChild(this.$canvas);\r\n\r\n        /* Inicializar el tablero */\r\n        this.boardMatrix = [];\r\n        for (let i = 0; i < this.files; i++){\r\n            this.boardMatrix[i] = [];\r\n            for (let j = 0; j < this.ranks; j++){\r\n                /* Inicializamos el tablero en Celdas de null para que no de problemas al rellenar el tablero con las piezas */\r\n                this.boardMatrix[i][j] = new Cell(null);\r\n            }\r\n        }        \r\n\r\n        /* Bind method -> Sirve para poder usar el this en el metodo */\r\n        this.setMouseCell = this.setMouseCell.bind(this);\r\n        this.setSelectedCell = this.setSelectedCell.bind(this);\r\n        this.pickPiece = this.pickPiece.bind(this);\r\n        this.dropPiece = this.dropPiece.bind(this);\r\n        this.dragPiece = this.dragPiece.bind(this);\r\n\r\n        this.$canvas.addEventListener('mousemove', this.dragPiece);\r\n\r\n        /* Mousedown -> Capturamos donde estamos cogiendo la pieza seleccionada del tablero */\r\n        this.$canvas.addEventListener('mousedown', this.pickPiece);\r\n\r\n        /* Mouseup -> Capturamos en que celda dejamos la pieza seleccionada del tablero */\r\n        this.$canvas.addEventListener('mouseup', this.dropPiece);\r\n    }   \r\n    \r\n    /**\r\n    * @function pickPiece = Selecciona la pieza que ha clicado el usuario y vuelve a pintar el tablero para reflejar los cambios\r\n    * @param {MouseEvent} e = MouseEvent al hacer click sobre la pieza\r\n    */\r\n    pickPiece(e){\r\n        \r\n        /* Limpiamos las celdas para que solo quede marcado el último movimiento */\r\n        this.clearSelections();\r\n\r\n        /* Comprobamos si hay una casilla seleccionada para asi no poder volver a seleccionar otra */\r\n        if (this.previousCell) return;\r\n\r\n        /* Capturamos el offSet X e Y de donde se ha producido el evento */\r\n        const { offsetX, offsetY } = e;\r\n        const [file, rank] = this.mouseCoordinatesToCell(offsetX, offsetY);\r\n        const selectedCell = this.boardMatrix[file][rank];\r\n\r\n        /* Comprobamos si hay una pieza en la celda seleccionada, sino, hacemos un return */\r\n        if (!selectedCell.piece) return;\r\n\r\n        /* Solo permitimos mostrar los moviemientos disponibles de la pieza seleccionada en caso de que coincidan su color y el color del turno del jugador */\r\n        if (this.currentPlayer == selectedCell.piece.color){\r\n\r\n            /* Cogemos la casilla donde se ubica el rey del jugador que está moviendo */\r\n            const cellKing = this.getKing();\r\n\r\n            /* En caso de que el rey del jugador que mueve no esté en jaque, puede mover todas las piezas */\r\n            if (!cellKing.piece.isCheck){\r\n\r\n                /* Le pasamos la posicion y el tablero para que nos indique si es posible hacer un movimiento con la pieza de esa celda */\r\n                selectedCell.piece.availableMovements([file, rank], this.boardMatrix);\r\n            \r\n            /* En caso de que el rey del jugador que mueve esté en jaque, solo podrá mover el rey */\r\n            } else {\r\n\r\n                if (selectedCell.piece.type != PieceTypes.PIECES.king) return;\r\n                /* Le pasamos la posicion y el tablero para que nos indique si es posible hacer un movimiento con la pieza de esa celda */\r\n                selectedCell.piece.availableMovements([file, rank], this.boardMatrix);\r\n\r\n            }\r\n\r\n            /* Guardamos la previousCell como la casilla seleccionada */\r\n            this.previousCell = selectedCell;\r\n\r\n            this.selectedCells.push(selectedCell);\r\n\r\n            selectedCell.setSelected(true);\r\n\r\n            /* Volvemos a dibujar el tablero para ver los cambios */\r\n            this.renderBoard();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @function dropPiece = Función para soltar la pieza en la casilla seleccionada\r\n    * @param {MouseEvent} e = MouseEvent al soltar la pieza\r\n    */\r\n    dropPiece(e){\r\n        /* Comprobamos si no hay una casilla seleccionada ya que no tendria sentido el metodo en ese caso */\r\n        if (!this.previousCell) return;\r\n\r\n        /* Capturamos el offSet X e Y de donde se ha producido el evento */\r\n        const { offsetX, offsetY } = e;\r\n        const [file, rank] = this.mouseCoordinatesToCell(offsetX, offsetY);\r\n        const selectedCell = this.boardMatrix[file][rank];\r\n\r\n        /* Comprobamos que si la celda que ha seleccionada es la misma que la celda anterior no haga nada */\r\n        if (this.previousCell == selectedCell) {\r\n            this.previousCell = null;\r\n            this.clearSelections();\r\n            this.clearPosibleMoves();\r\n            this.renderBoard();\r\n            return;\r\n        }\r\n\r\n        /* Comprobamos que donde se quiere dejar la pieza es una celda con movimiento válido */\r\n        if (!selectedCell.availableMove) {\r\n            this.previousCell = null;\r\n            this.clearSelections();\r\n            this.clearPosibleMoves();\r\n            this.renderBoard();\r\n            return;\r\n        }\r\n\r\n        /* Colocamos la pieza seleccionada en la celda seleccionada  */\r\n        selectedCell.setPiece(this.previousCell.piece);\r\n\r\n        /* Añadimos la celda seleccionada al array de celdas seleccionadas para limpiarlo posteriormente */\r\n        this.selectedCells.push(selectedCell);\r\n\r\n        /* Miramos si la pieza que hemos movido es el rey */\r\n        if (this.previousCell.piece.type == PieceTypes.PIECES.king){\r\n\r\n            /* Enroque corto */\r\n            this.shortCastle(file, rank, selectedCell);\r\n\r\n            /* Enroque largo */\r\n            this.longCastle(file, rank, selectedCell);\r\n            \r\n        }\r\n\r\n        /* En caso de que la pieza desplazada no sea el rey, miramos si donde se situa la pieza seleccionada hace jaque al rey enemigo */\r\n        if (selectedCell.piece.type != PieceTypes.PIECES.pawn){\r\n            if (selectedCell.piece.type != PieceTypes.PIECES.king){\r\n                selectedCell.piece.isCheck([file, rank], this.boardMatrix);\r\n            }\r\n        } \r\n\r\n        /* Eliminamos la pieza de la casilla en la que se encontraba anteriormente */\r\n        this.previousCell.setPiece(null);\r\n\r\n        /* Volvemos a null el valor de la celda anterior seleccionada */\r\n        this.previousCell = null;\r\n        selectedCell.setSelected(true);\r\n\r\n        /* Cambiamos el valor de boardMove al contrario del actual para girar el tablero */\r\n        //this.boardMove = !this.boardMove;\r\n\r\n        /* Ponemos a true la booleana que dice si la pieza se ha movido */\r\n        selectedCell.piece.moved = true;\r\n\r\n        /* Cambiamos el actual jugador al previo y el previo al actual */\r\n        var auxCurrentPlayer = this.currentPlayer\r\n        this.currentPlayer = this.previousPlayer;\r\n        this.previousPlayer = auxCurrentPlayer;\r\n\r\n        /* En caso de que la pieza que se ha movido sea el rey, reseteamos el valor de isCheck a false */\r\n        if (selectedCell.piece.type == PieceTypes.PIECES.king && selectedCell.piece.isCheck) selectedCell.piece.isCheck = false;\r\n\r\n        /* Limpiamos las celdas que tienen availableMoves a true para limpiar el tablero */\r\n        this.clearPosibleMoves();\r\n\r\n        /* Pintamos el tablero para volver a ver los cambios */\r\n        this.renderBoard();\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @returns devuelve la celda donde se encuentra el rey del jugador que está moviendo en ese momento\r\n     */\r\n     getKing(){\r\n        for (let i = 0; i < this.files; i++){\r\n            for (let j = 0; j < this.ranks; j++){\r\n                const cell = this.boardMatrix[i][j];\r\n                if (cell.piece){\r\n                    if (cell.piece.type == PieceTypes.PIECES.king && cell.piece.color == this.currentPlayer) return cell;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @function shortCastle realiza el enroque corto\r\n     * @param {int} file fila de la celda del tablero\r\n     * @param {int} rank columna de la fila del tablero\r\n     * @param {Cell} selectedCell celda seleccionada\r\n     */\r\n    shortCastle(file, rank, selectedCell){\r\n\r\n        if (!this.previousCell.piece.moved){\r\n\r\n            const selectedCellRockShortWhite = this.boardMatrix[file + 1][rank];\r\n            \r\n            /* En caso de que la pieza sea blanca cogemos la celda del enroque corto blanco */\r\n            if (this.previousCell.piece.color == Color.THEME.light) {\r\n                var selectedCastle = this.boardMatrix[6][7];\r\n            /* En caso de que la pieza sea negra cogemos la celda del enorque corto negro */\r\n            } else {\r\n                var selectedCastle = this.boardMatrix[6][0];\r\n            }\r\n\r\n            /* En caso de que se haya seleccionado la celda de enroque largo movemos la torre a la posición que le corresponde */\r\n            const selectedNewCellRock = this.boardMatrix[file - 1][rank];\r\n            if (selectedCastle == selectedCell){\r\n                if (!selectedCellRockShortWhite.piece.moved){\r\n                    selectedNewCellRock.setPiece(selectedCellRockShortWhite.piece);\r\n                    selectedCellRockShortWhite.setPiece(null);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @function shortCastle realiza el enroque largo\r\n     * @param {int} file fila de la celda del tablero\r\n     * @param {int} rank columna de la fila del tablero\r\n     * @param {Cell} selectedCell celda seleccionada\r\n     */\r\n    longCastle(file, rank, selectedCell){\r\n\r\n        if (!this.previousCell.piece.moved){\r\n\r\n            const selectedCellRockLongWhite = this.boardMatrix[file - 2][rank];\r\n\r\n            /* En caso de que la pieza sea blanca cogemos la celda del enroque corto blanco */\r\n            if (this.previousCell.piece.color == Color.THEME.light){\r\n                var selectedCastle = this.boardMatrix[2][7];\r\n            /* En caso de que la pieza sea negra cogemos la celda del enorque corto negro */\r\n            } else {\r\n                var selectedCastle = this.boardMatrix[2][0];\r\n            }\r\n            \r\n            /* En caso de que se haya seleccionado la celda de enroque largo movemos la torre a la posición que le corresponde */\r\n            const selectedNewCellRock = this.boardMatrix[file + 1][rank];\r\n            if (selectedCastle == selectedCell){\r\n                if (!selectedCellRockLongWhite.piece.moved){\r\n                    selectedNewCellRock.setPiece(selectedCellRockLongWhite.piece);\r\n                    selectedCellRockLongWhite.setPiece(null);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @function \r\n    * @param {MouseEvent} e = MouseEvent al hacer click\r\n    */\r\n     dragPiece(e){\r\n        \r\n    }\r\n\r\n    /**\r\n    * @function clearSelections = Borra las celdas seleccionadas del array para limpiarlo\r\n    */\r\n    clearSelections(){\r\n        this.selectedCells.forEach((celda) => celda.setSelected(false));\r\n        /* Limpiamos el array */\r\n        this.selectedCells = [];\r\n    }\r\n\r\n    /**\r\n     * @function clearPosibleMoves = Pone a false las celdas que tengan AvailableMove a true\r\n     */\r\n    clearPosibleMoves(){\r\n        this.posibleMoves.forEach((celda) => celda.setAvailableMovement(false));\r\n        /* Limpiamos el array */\r\n        this.posibleMoves = [];\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {integer} i Coordenada i de la casilla del tablero\r\n     * @param {integer} j Coordenada j de la casilla del tablero\r\n     * @returns retorna las coordenadas de la celda que se ha seleccionado\r\n     */\r\n    mouseCoordinatesToCell(i, j){\r\n        /* Con el valor de Offset dividido del tamaño de la celda podemos saber la celda que se esta seleccionando en ese momento */\r\n        let file = Math.floor(i / this.cell_width);\r\n        let rank = Math.floor(j / this.cell_height);\r\n\r\n        /* Modificamos las coordenadas en caso de que el tablero esté girado para que nos devuelva las coordenadas correctas */\r\n        if (this.boardMove){\r\n            file = this.files - 1 - file;\r\n            rank = this.ranks - 1 - rank\r\n        }\r\n        return [file, rank];\r\n    }\r\n\r\n    /**\r\n     * @function setSelectCell = Cambia la propiedad selected a true de la celda que ha seleccionado el usuario\r\n     * @param {MouseEvent} e = MouseEvent al hacer click\r\n     */\r\n    setSelectedCell(e){\r\n        /* Capturamos el offSet X e Y de donde se ha producido el evento */\r\n        const { offsetX, offsetY } = e;\r\n        const [file, rank] = this.mouseCoordinatesToCell(offsetX, offsetY);\r\n        const selectedCell = this.boardMatrix[file][rank];\r\n\r\n        /* Cambiamos a true la casilla seleccionada */\r\n        selectedCell.setSelected(true);\r\n\r\n        /* Volvemos a dibujar el tablero para ver los cambios */\r\n        this.renderBoard();\r\n    }\r\n\r\n    setMouseCell(e){\r\n        /* Con el valor de Offset dividido del tamaño de la celda podemos saber la celda que se esta seleccionando en ese momento */\r\n        const { offsetX, offsetY } = e;\r\n        const i = Math.floor(offsetX / this.cell_width);\r\n        const j = Math.floor(offsetY / this.cell_height);\r\n\r\n    }\r\n\r\n    /**\r\n    * @function initPlacePiece = Función para colocar la pieza que se envia por parametro en la casilla correspondientes\r\n    * @param {i: number} Posición de la fila que corresponde al tablero\r\n    * @param {j: number} Posición de la columna que corresponde al tablero\r\n    * @param {piece: Piece} Pieza que queremos introducir en la celda \r\n    */\r\n    initPlacePiece(i, j, piece){\r\n        const cell = this.boardMatrix[i][j];\r\n        cell.setPiece(piece);\r\n    }\r\n\r\n    /**\r\n    * @function renderBoard = Función para renderizar el tablero \r\n    */\r\n    renderBoard(){\r\n        for (let i = 0; i < this.files; i++){\r\n            for (let j = 0; j < this.ranks; j++){\r\n\r\n                /* Obtenemos la fila y columna para pintarla al girar el tablero */\r\n                let drawI = i;\r\n                let drawJ = j;\r\n\r\n                /* En caso de que boardMove sea true, invertimos las posiciones para pintarlas */\r\n                if (this.boardMove){\r\n                    drawI = this.ranks - 1 - drawI;\r\n                    drawJ = this.files - 1 - drawJ;\r\n                }\r\n\r\n                let rectColor = this.theme.light;\r\n                let textColor = this.theme.dark;\r\n\r\n                /* Pintamos las casillas del color dependiendo de si la casilla es par o impar */\r\n                if ((drawI + drawJ) % 2){\r\n                    rectColor = this.theme.dark;\r\n                    textColor = this.theme.light;\r\n                } \r\n\r\n                /* Creamos los cuadrados de la anchura y la altura de la celda separados por la anchura y la altura de la celda */\r\n                this.ctx.fillStyle = rectColor;\r\n                this.ctx.fillRect(drawI * this.cell_width, drawJ * this.cell_height, this.cell_width, this.cell_height);\r\n\r\n                /* Cambiamos el color del texto al contrario de la casilla para imprimir las coordenadas */\r\n                this.ctx.fillStyle = textColor;\r\n\r\n                /* Centramos el texto del canvas alineado al medio y al centro */\r\n                this.ctx.textBaseline = 'top';\r\n                this.ctx.textAlign = 'start';\r\n                this.ctx.font = '8px Arial';\r\n\r\n                /* Añadimos las coordenadas en la izquierda arriba de la casilla */\r\n                this.ctx.fillText(`[${i} ${j}]`, \r\n                    drawI * this.cell_width + 10, \r\n                    drawJ * this.cell_height + 10);\r\n\r\n                /* Comprobamos qual es la casilla seleccionada */\r\n                const cell = this.boardMatrix[i][j];\r\n\r\n                /* Comprobamos si la celda está seleccionada */\r\n                if (cell.selected) {\r\n                    /* Dibujamos un pequeño margen amarillo para guardar el movimiento de la pieza */\r\n                    this.ctx.strokeStyle = \"#FFFF00\";\r\n                    this.ctx.lineWidth = 3;\r\n                    this.ctx.strokeRect(drawI * this.cell_width, \r\n                        drawJ * this.cell_height, \r\n                        this.cell_width, this.cell_height);\r\n                }\r\n\r\n                /* Comprobamos si hay celdas disponibles para el movimiento de la pieza seleccionda */\r\n                if (cell.availableMove) {\r\n                    /* Dibujamos un circulo en las casillas disponibles para la pieza seleccionada */\r\n                    this.ctx.fillStyle = \"#000000\";\r\n                    this.ctx.globalAlpha = 0.3;\r\n                    this.ctx.beginPath();\r\n                    this.ctx.arc(\r\n                        drawI * this.cell_width + this.cell_width / 2, \r\n                        drawJ * this.cell_height + + this.cell_height / 2, \r\n                        16,\r\n                        0,\r\n                        2 * Math.PI);\r\n                    this.ctx.fill();\r\n                    \r\n                    /* Reseteamos el Alpha */\r\n                    this.ctx.globalAlpha = 1;\r\n                    \r\n                    /* Incluimos las celdas con availableMove a true al array */\r\n                    this.posibleMoves.push(cell);\r\n                }\r\n\r\n                /* Comprobamos si existe la pieza dentro de la celda y la PINTAMOS */\r\n                const piece = cell?.piece;\r\n                if (piece){\r\n\r\n                    /* Comprobamos que al rey del jugador que lo toca mover no esté en jaque, si lo está, lo remarcamos con un borde rojo */\r\n                    if (piece.type == PieceTypes.PIECES.king){\r\n                        if (piece.isCheck){\r\n                            this.ctx.strokeStyle = \"red\";\r\n                            this.ctx.lineWidth = 3;\r\n                            this.ctx.strokeRect(drawI * this.cell_width, \r\n                            drawJ * this.cell_height, \r\n                            this.cell_width, this.cell_height);\r\n                        }\r\n                    }\r\n\r\n                    /* Asignamos el color del contexto el color del jugador que le toca mover */\r\n                    this.ctx.fillStyle = this.pieceTheme[piece.color];\r\n                    \r\n                    /* Centramos el texto del canvas alineado al medio y al centro */\r\n                    this.ctx.textBaseline = 'middle';\r\n                    this.ctx.textAlign = 'center';\r\n\r\n                    /* Modificamos el tamaño de la pieza */\r\n                    this.ctx.font = '72px Arial';\r\n                    /* Añadimos las fichas en el centro de la casilla */\r\n                    this.ctx.fillStyle = piece.color;\r\n                    this.ctx.fillText(piece.renderPiece[0], \r\n                        drawI * this.cell_width + this.cell_width / 2, \r\n                        drawJ * this.cell_height + this.cell_height / 2 + this.piece_offset);\r\n\r\n                    this.ctx.fillStyle = this.pieceTheme.dark; //Conseguimos sobreponer las imagenes en caso de que sean piezas blancas y asi resaltar más la pieza\r\n                    if (this.pieceTheme[piece.color] == '#FFFFFF') this.ctx.fillText(piece.renderPiece[1], \r\n                        drawI * this.cell_width + this.cell_width / 2, \r\n                        drawJ * this.cell_height + this.cell_height / 2 + this.piece_offset);\r\n                    \r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nexport {Board}","import {PieceTypes} from '../types/PieceTypes.js';\r\nimport {Color} from '../types/Color.js';\r\nimport {Cell} from './Cell.js';\r\n\r\nclass Piece {\r\n    /**\r\n     * @type {string} color = Color de la pieza (light / black)\r\n     */\r\n    color;\r\n\r\n    /**\r\n     * @type {string} type = Tipo de pieza\r\n     */\r\n    type;\r\n\r\n    /**\r\n     * @type {Array.<string>} renderPiece = variable para pintar las pieza\r\n     */\r\n    renderPiece;\r\n\r\n    /**\r\n     * @type {boolean} moved = variable para saber si hemos movido ya la pieza\r\n     */\r\n    moved\r\n\r\n    /**\r\n     * \r\n     * @param {string} type \r\n     * @param {string} color \r\n     * @param {Array<PieceTypes>} renderPiece\r\n     */\r\n    constructor(color, renderPiece, type){\r\n        this.color = color;\r\n        this.renderPiece = renderPiece;\r\n        this.type = type;\r\n        this.moved = false;\r\n    }\r\n\r\n    /**\r\n     * @function getCellFromCoords = función para que nos retorne con seguridad una celda existente\r\n     * @param {Array<Integer>} position \r\n     * @param {Array<Integer>} boardMatrix \r\n     * @returns {Cell} cell = retorna la celda con las coordenadas enviadas por parámetro\r\n     */\r\n    getCellFromCoords(position, boardMatrix){\r\n        const [i, j] = position;\r\n        const rank = boardMatrix[i] || [];\r\n        const cell = rank[j];\r\n        return cell;\r\n    }\r\n\r\n    /**\r\n     * @function checkDirection = se encarga de comprobar las casillas disponibles en la dirección que se mueve la pieza\r\n     * @param {Array<Integer, Integer>} position array with con las coordenadas i, j del tablero\r\n     * @param {Array<Integer, Integer>} direction array con la dirección (iDir, jDir) hacia la que se mueve la ficha\r\n     * @param {Array<Integer, Integer>} boardMatrix tablero del juego\r\n     */\r\n    checkDirection(position, direction, boardMatrix){\r\n        const [i, j] = position;\r\n        const [iDir, jDir] = direction;\r\n        for (let k = 1; i <= boardMatrix.length; k++){\r\n\r\n            /* De esta manera podemos definir la direccion al multiplicarla por el parametro de la direccion */\r\n            const cell = this.getCellFromCoords([i + (k * iDir), j + (k * jDir)], boardMatrix);\r\n            if (!cell) break;\r\n            if (cell.piece && cell.piece.color == this.color) break;\r\n            \r\n            cell.setAvailableMovement(true);\r\n\r\n            if (cell.piece) break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @function abstract availableMovements = Retorna los movimientos disponibles para esa pieza\r\n     */\r\n    availableMovements(position, boardMatrix){};\r\n\r\n}\r\n\r\nexport {Piece}","import {Piece} from '../Piece.js';\r\nimport {Cell} from '../Cell.js';\r\nimport {Theme} from '../../types/Theme.js';\r\nimport {PieceTypes} from '../../types/PieceTypes.js';\r\nimport {Color} from '../../types/Color.js';\r\n\r\nclass Pawn extends Piece {\r\n    /**\r\n     * @class Pawn @counstructor\r\n     * @param {String} color\r\n     */\r\n    constructor(color){\r\n        super(color, ['♟', '♙'], PieceTypes.PIECES.pawn);\r\n    }\r\n\r\n    /**\r\n     * @function availableMovements = Retorna los posibles movimientos que puede realizar la pieza Pawn\r\n     * @param {Array<Integer>} position = Coordenadas de la celda donde se encuentra la pieza Pawn\r\n     * @param {Array<Integer>} boardMatrix = Tablero del juego\r\n     */\r\n    availableMovements(position, boardMatrix){\r\n        /* Coordenadas de la posición donde se encuentra la pieza */\r\n        const [i, j] = position;\r\n\r\n        /* Array con las diferentes celdas disponibles */\r\n        const cellsPossiblesMoves = [];\r\n\r\n        /* Conseguimos la posicion de las celdas disponibles en la que puede mover la pieza seleccionada */\r\n        const cellPossibleMove = boardMatrix[i][this.color == Color.THEME.dark ? j + 1 : j - 1];\r\n        cellsPossiblesMoves.push(cellPossibleMove);\r\n\r\n        /* Conseguimos la posicion de las celdas disponibles en caso de que se pueda capturar con el peon en diagonal izquierda */\r\n        if (i != 0 && this.color == Color.THEME.light){\r\n\r\n            var cellPossibleMoveTakeLeft = boardMatrix[i - 1][j - 1];\r\n            /* Comprobamos que la pieza que podemos capturar no sea del mismo color que la seleccionada */\r\n            if (cellPossibleMoveTakeLeft.piece && cellPossibleMoveTakeLeft.piece.color != this.color) cellsPossiblesMoves.push(cellPossibleMoveTakeLeft);\r\n        } else if (i != 7 && this.color == Color.THEME.dark){\r\n\r\n            var cellPossibleMoveTakeLeft = boardMatrix[i + 1][j + 1];\r\n            /* Comprobamos que la pieza que podemos capturar no sea del mismo color que la seleccionada */\r\n            if (cellPossibleMoveTakeLeft.piece && cellPossibleMoveTakeLeft.piece.color != this.color) cellsPossiblesMoves.push(cellPossibleMoveTakeLeft);\r\n        }\r\n\r\n        /* Conseguimos la posicion de las celdas disponibles en caso de que se pueda capturar con el peon en diagonal derecha */\r\n        if (i != 7 && this.color == Color.THEME.light){\r\n            \r\n            var cellPossibleMoveTakeRight = boardMatrix[i + 1 ][j - 1];\r\n            /* Comprobamos que la pieza que podemos capturar no sea del mismo color que la seleccionada */\r\n            if (cellPossibleMoveTakeRight.piece && cellPossibleMoveTakeRight.piece.color != this.color) cellsPossiblesMoves.push(cellPossibleMoveTakeRight);\r\n        } else if (i != 0 && this.color == Color.THEME.dark){\r\n\r\n            var cellPossibleMoveTakeRight = boardMatrix[i -1][j + 1];\r\n            /* Comprobamos que la pieza que podemos capturar no sea del mismo color que la seleccionada */\r\n            if (cellPossibleMoveTakeRight.piece && cellPossibleMoveTakeRight.piece.color != this.color) cellsPossiblesMoves.push(cellPossibleMoveTakeRight);\r\n        }\r\n\r\n        /* Miramos que en caso de que el peon se encuentre en la pirmera fila y no sea del color contrario del inicio puede mover dos posiciones*/\r\n        if (j == 1 && this.color != Color.THEME.light || j == 6 && this.color != Color.THEME.dark){\r\n            /* Comprobamos que no haya una pieza delante */\r\n            if (!cellPossibleMove.piece){\r\n                const cellPossibleMoveStart = boardMatrix[i][this.color == Color.THEME.dark ? j + 2 : j - 2];\r\n                cellsPossiblesMoves.push(cellPossibleMoveStart);\r\n            }\r\n        }\r\n        \r\n        /* Comprobamos si no hay una pieza en la casilla donde se puede mover la pieza seleccionada */\r\n        for (let i = 0; i < cellsPossiblesMoves.length; i++){\r\n            if (!cellsPossiblesMoves[i].piece && cellsPossiblesMoves[i] != cellPossibleMoveTakeLeft && cellsPossiblesMoves[i] != cellPossibleMoveTakeRight) \r\n                cellsPossiblesMoves[i].setAvailableMovement(true);\r\n\r\n            /* Ponemos la celda en true en caso de que haya pieza que se pueda capturar en la diagonal izquierda */\r\n            if (cellsPossiblesMoves[i] == cellPossibleMoveTakeLeft){\r\n                if (cellsPossiblesMoves[i].piece) cellsPossiblesMoves[i].setAvailableMovement(true);\r\n            }\r\n\r\n            /* Ponemos la celda en true en caso de que haya pieza que se pueda capturar en la diagonal derecha */\r\n            if (cellsPossiblesMoves[i] == cellPossibleMoveTakeRight){\r\n                if (cellsPossiblesMoves[i].piece) cellsPossiblesMoves[i].setAvailableMovement(true);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport {Pawn}","import {Piece} from '../Piece.js';\r\nimport {PieceTypes} from '../../types/PieceTypes.js';\r\n\r\nclass Rook extends Piece {\r\n    /**\r\n     * @class Rook @counstructor\r\n     * @param {String} color\r\n     */\r\n    constructor(color){\r\n        super(color, ['♜', '♖'], PieceTypes.PIECES.rook);\r\n    }\r\n\r\n    \r\n    /**\r\n     * @function availableMovements = Retorna los posibles movimientos que puede realizar la pieza Rook\r\n     * @param {Array<Integer>} position = Coordenadas de la celda donde se encuentra la pieza Rook\r\n     * @param {Array<Integer>} boardMatrix = Tablero del juego\r\n     */\r\n    availableMovements(position, boardMatrix){\r\n\r\n        /* Vertical haci arriba */\r\n        this.checkDirection(position, [0, -1], boardMatrix);\r\n\r\n        /* Vertical hacia abajo */\r\n        this.checkDirection(position, [1, 0], boardMatrix);\r\n\r\n        /* Horizontal a la derecha */\r\n        this.checkDirection(position, [0, 1], boardMatrix);\r\n\r\n        /* Horizontal a la izquierda */\r\n        this.checkDirection(position, [-1, 0], boardMatrix);\r\n\r\n    }\r\n\r\n    /**\r\n     * @function isCheck = nos indica si el rey está siendo amenazado dependiendo de la casilla donde coloquemos la pieza seleccionada\r\n     * @param {Array<integer, integer>} position = posición del tablero donde se encuentra la casilla seleccionada\r\n     * @param {Array<integer, integer>} boardMatrix = tablero\r\n     */\r\n    isCheck(position, boardMatrix){\r\n\r\n        /* Vertical haci arriba */\r\n        this.checkKingDirection(position, [0, -1], boardMatrix);\r\n\r\n        /* Vertical hacia abajo */\r\n        this.checkKingDirection(position, [1, 0], boardMatrix);\r\n\r\n        /* Horizontal a la derecha */\r\n        this.checkKingDirection(position, [0, 1], boardMatrix);\r\n\r\n        /* Horizontal a la izquierda */\r\n        this.checkKingDirection(position, [-1, 0], boardMatrix);\r\n\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Array<integer, integer>} direction = dirección hacia la que puede desplazarse la pieza\r\n     * @param {Array<integer, integer>} position = posición del tablero donde se encuentra la casilla seleccionada\r\n     * @param {Array<integer, integer>} boardMatrix = tablero \r\n     * @returns nos indica si el rey está siendo amenazado dependiendo de la casilla donde coloquemos la pieza seleccionada\r\n    */\r\n    checkKingDirection(position, direction, boardMatrix) {\r\n        const [i, j] = position;\r\n        const [iDir, jDir] = direction;\r\n        for (let k = 1; i <= boardMatrix.length; k++){\r\n\r\n            /* De esta manera podemos definir la direccion al multiplicarla por el parametro de la direccion */\r\n            const cell = this.getCellFromCoords([i + (k * iDir), j + (k * jDir)], boardMatrix);\r\n\r\n            if (!cell) return;\r\n\r\n            if (cell.piece){\r\n                /* Comprobamos que en caso de que la celda tenga una pieza si es del mismo color que la pieza seleccionada salga del bucle */\r\n                if (cell.piece.color == this.color) break;\r\n\r\n                /* Si la pieza que hemos encontrado no es el rey, salimos del bucle */\r\n                if (cell.piece.type != PieceTypes.PIECES.king) break;\r\n\r\n                /* Si es el rey, cambiamos is Check a true */\r\n                alert(\"CHECK\");\r\n                cell.piece.isCheck = true;\r\n                break;\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport {Rook}","import {Piece} from '../Piece.js';\r\nimport {PieceTypes} from '../../types/PieceTypes.js';\r\n\r\n/**\r\n * @class Knight @constructor\r\n * @param {String} color\r\n */\r\nclass Knight extends Piece {\r\n    \r\n    constructor(color){\r\n        super(color, ['♞', '♘'], PieceTypes.PIECES.knight);\r\n    }\r\n\r\n    isCheck(position, boardMatrix){\r\n        const [i, j] = position;\r\n\r\n        /* Posibles movimientos del caballo */\r\n        const possibleMoves = [\r\n            [i - 1, j - 2], \r\n            [i + 1, j - 2], \r\n            [i + 2, j - 1],\r\n            [i + 2, j + 1],\r\n            [i - 2, j + 1],\r\n            [i + 1, j + 2],\r\n            [i - 1, j + 2],\r\n            [i - 2, j - 1]\r\n        ];\r\n\r\n        /* Recorremos el array para encontrar al rey en una de las casillas amenzadas por el caballo */\r\n        for (let i = 0; i < possibleMoves.length; i++){\r\n\r\n            const cell = this.getCellFromCoords(possibleMoves[i], boardMatrix);\r\n\r\n            console.log(cell);\r\n\r\n            if (cell){\r\n                \r\n                if (cell.piece){\r\n\r\n                    /* Comprobamos que en caso de que la celda tenga una pieza si es del mismo color que la pieza seleccionada salga del bucle */\r\n                    if (cell.piece.color != this.color){\r\n                        /* Si una de las casillas amenazadas por el caballo se encuentra el rey, cambiamos isCheck a true */\r\n                        if (cell.piece.type == PieceTypes.PIECES.king){\r\n                            alert(\"CHECK\");\r\n                            cell.piece.isCheck = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    availableMovements(position, boardMatrix){\r\n        const [i, j] = position;\r\n\r\n        /* Posibles movimientos del caballo */\r\n        const possibleMoves = [\r\n            [i - 1, j - 2], \r\n            [i + 1, j - 2], \r\n            [i + 2, j - 1],\r\n            [i + 2, j + 1],\r\n            [i - 2, j + 1],\r\n            [i + 1, j + 2],\r\n            [i - 1, j + 2],\r\n            [i - 2, j - 1]\r\n        ];\r\n\r\n        /* Recorremos el array para ver cuales son las casillas disponibles para el caballo */\r\n        for (let i = 0; i < possibleMoves.length; i++){\r\n            const cell = this.getCellFromCoords(possibleMoves[i], boardMatrix);\r\n            if (cell &&  !(cell.piece && cell.piece.color == this.color)) cell.setAvailableMovement(true);\r\n        }\r\n    }\r\n}\r\n\r\nexport {Knight}","import {Piece} from '../Piece.js';\r\nimport {PieceTypes} from '../../types/PieceTypes.js';\r\n\r\nclass Bishop extends Piece {\r\n    /**\r\n     * @class Bishop @counstructor\r\n     * @param {String} color\r\n    */\r\n    constructor(color){\r\n        super(color, ['♝', '♗'], PieceTypes.PIECES.bishop);\r\n    }\r\n\r\n    /**\r\n     * @function availableMovements = Retorna los posibles movimientos que puede realizar la pieza Bishop\r\n     * @param {Array<Integer>} position = Coordenadas de la celda donde se encuentra la pieza Bishop\r\n     * @param {Array<Integer>} boardMatrix = Tablero del juego\r\n     */\r\n     availableMovements(position, boardMatrix){\r\n\r\n        /* Diagonal abajo a la derecha */\r\n        this.checkDirection(position, [1, 1], boardMatrix);\r\n\r\n        /* Diagonal abajo a la izquierda */\r\n        this.checkDirection(position, [-1, 1], boardMatrix);\r\n\r\n        /* Diagonal arriba a la derecha */\r\n        this.checkDirection(position, [1, -1], boardMatrix);\r\n\r\n        /* Diagonal arriba a la izquierda */\r\n        this.checkDirection(position, [-1, -1], boardMatrix);\r\n\r\n    }\r\n\r\n    /**\r\n     * @function isCheck = nos indica si el rey está siendo amenazado dependiendo de la casilla donde coloquemos la pieza seleccionada\r\n     * @param {Array<integer, integer>} position = posición del tablero donde se encuentra la casilla seleccionada\r\n     * @param {Array<integer, integer>} boardMatrix = tablero\r\n     */\r\n    isCheck(position, boardMatrix){\r\n        \r\n        /* Diagonal abajo a la derecha */\r\n        this.checkKingDirection(position, [1, 1], boardMatrix);\r\n\r\n        /* Diagonal abajo a la izquierda */\r\n        this.checkKingDirection(position, [-1, 1], boardMatrix);\r\n\r\n        /* Diagonal arriba a la derecha */\r\n        this.checkKingDirection(position, [1, -1], boardMatrix);\r\n\r\n        /* Diagonal arriba a la izquierda */\r\n        this.checkKingDirection(position, [-1, -1], boardMatrix);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Array<integer, integer>} direction = dirección hacia la que puede desplazarse la pieza\r\n     * @param {Array<integer, integer>} position = posición del tablero donde se encuentra la casilla seleccionada\r\n     * @param {Array<integer, integer>} boardMatrix = tablero \r\n     * @returns nos indica si el rey está siendo amenazado dependiendo de la casilla donde coloquemos la pieza seleccionada\r\n    */\r\n    checkKingDirection(position, direction, boardMatrix) {\r\n        const [i, j] = position;\r\n        const [iDir, jDir] = direction;\r\n        for (let k = 1; i <= boardMatrix.length; k++){\r\n\r\n            /* De esta manera podemos definir la direccion al multiplicarla por el parametro de la direccion */\r\n            const cell = this.getCellFromCoords([i + (k * iDir), j + (k * jDir)], boardMatrix);\r\n\r\n            if (!cell) return;\r\n\r\n            if (cell.piece){\r\n                /* Comprobamos que en caso de que la celda tenga una pieza si es del mismo color que la pieza seleccionada salga del bucle */\r\n                if (cell.piece.color == this.color) break;\r\n\r\n                /* Si la pieza que hemos encontrado no es el rey, salimos del bucle */\r\n                if (cell.piece.type != PieceTypes.PIECES.king) break;\r\n\r\n                /* Si es el rey, cambiamos is Check a true */\r\n                alert(\"CHECK\");\r\n                cell.piece.isCheck = true;\r\n                break;\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport {Bishop}","import {Piece} from '../Piece.js';\r\nimport {PieceTypes} from '../../types/PieceTypes.js';\r\n\r\nclass Queen extends Piece {\r\n    /**\r\n     * @class Queen @counstructor\r\n     * @param {String} color\r\n     */\r\n    constructor(color){\r\n        super(color, ['♛', '♕'], PieceTypes.PIECES.queen);\r\n    }\r\n\r\n    /**\r\n     * @function availableMovements = Retorna los posibles movimientos que puede realizar la pieza Queen\r\n     * @param {Array<Integer>} position = Coordenadas de la celda donde se encuentra la pieza Queen\r\n     * @param {Array<Integer>} boardMatrix = Tablero del juego\r\n     */\r\n     availableMovements(position, boardMatrix){\r\n\r\n        /* Diagonal abajo a la derecha */\r\n        this.checkDirection(position, [1, 1], boardMatrix);\r\n\r\n        /* Diagonal abajo a la izquierda */\r\n        this.checkDirection(position, [-1, 1], boardMatrix);\r\n\r\n        /* Diagonal arriba a la derecha */\r\n        this.checkDirection(position, [1, -1], boardMatrix);\r\n\r\n        /* Diagonal arriba a la izquierda */\r\n        this.checkDirection(position, [-1, -1], boardMatrix);\r\n\r\n        /* Vertical hacia arriba */\r\n        this.checkDirection(position, [0, -1], boardMatrix);\r\n\r\n        /* Vertical hacia abajo */\r\n        this.checkDirection(position, [1, 0], boardMatrix);\r\n\r\n        /* Horizontal a la derecha */\r\n        this.checkDirection(position, [0, 1], boardMatrix);\r\n\r\n        /* Horizontal a la izquierda */\r\n        this.checkDirection(position, [-1, 0], boardMatrix);\r\n\r\n    }\r\n\r\n    /**\r\n     * @function isCheck = nos indica si el rey está siendo amenazado dependiendo de la casilla donde coloquemos la pieza seleccionada\r\n     * @param {Array<integer, integer>} position = posición del tablero donde se encuentra la casilla seleccionada\r\n     * @param {Array<integer, integer>} boardMatrix = tablero\r\n     */\r\n    isCheck(position, boardMatrix){\r\n\r\n        /* Diagonal abajo a la derecha */\r\n        this.checkKingDirection(position, [1, 1], boardMatrix);\r\n\r\n        /* Diagonal abajo a la izquierda */\r\n        this.checkKingDirection(position, [-1, 1], boardMatrix);\r\n\r\n        /* Diagonal arriba a la derecha */\r\n        this.checkKingDirection(position, [1, -1], boardMatrix);\r\n\r\n        /* Diagonal arriba a la izquierda */\r\n        this.checkKingDirection(position, [-1, -1], boardMatrix);\r\n\r\n        /* Vertical hacia arriba */\r\n        this.checkKingDirection(position, [0, -1], boardMatrix);\r\n\r\n        /* Vertical hacia abajo */\r\n        this.checkKingDirection(position, [1, 0], boardMatrix);\r\n\r\n        /* Horizontal a la derecha */\r\n        this.checkKingDirection(position, [0, 1], boardMatrix);\r\n\r\n        /* Horizontal a la izquierda */\r\n        this.checkKingDirection(position, [-1, 0], boardMatrix);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Array<integer, integer>} direction = dirección hacia la que puede desplazarse la pieza\r\n     * @param {Array<integer, integer>} position = posición del tablero donde se encuentra la casilla seleccionada\r\n     * @param {Array<integer, integer>} boardMatrix = tablero \r\n     * @returns nos indica si el rey está siendo amenazado dependiendo de la casilla donde coloquemos la pieza seleccionada\r\n     */\r\n    checkKingDirection(position, direction, boardMatrix) {\r\n        const [i, j] = position;\r\n        const [iDir, jDir] = direction;\r\n        for (let k = 1; i <= boardMatrix.length; k++){\r\n\r\n            /* De esta manera podemos definir la direccion al multiplicarla por el parametro de la direccion */\r\n            const cell = this.getCellFromCoords([i + (k * iDir), j + (k * jDir)], boardMatrix);\r\n\r\n            if (!cell) return;\r\n\r\n            if (cell.piece){\r\n                /* Comprobamos que en caso de que la celda tenga una pieza si es del mismo color que la pieza seleccionada salga del bucle */\r\n                if (cell.piece.color == this.color) break;\r\n\r\n                /* Si la pieza que hemos encontrado no es el rey, salimos del bucle */\r\n                if (cell.piece.type != PieceTypes.PIECES.king) break;\r\n\r\n                /* Si es el rey, cambiamos is Check a true */\r\n                alert(\"CHECK\");\r\n                cell.piece.isCheck = true;\r\n                break;\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport {Queen}","import {Piece} from '../Piece.js';\r\nimport {PieceTypes} from '../../types/PieceTypes.js';\r\n\r\nclass King extends Piece {\r\n\r\n    /**\r\n     * @type {boolean} isCheck = nos indica si el rey se encuentra en jaque\r\n     */\r\n    isCheck;\r\n\r\n    /**\r\n     * @type {Array<integer, integer>} directions = indica las direcciones posibles a las que se puede mover el rey\r\n     */\r\n    directions = [\r\n        [1, 1],\r\n        [-1, 1],\r\n        [1, -1], \r\n        [-1, -1], \r\n        [0, -1], \r\n        [1, 0],\r\n        [0, 1],\r\n        [-1, 0]\r\n    ];\r\n\r\n    /**\r\n     * @class King @counstructor\r\n     * @param {String} color\r\n     */\r\n    constructor(color){\r\n        super(color, ['♚', '♔'], PieceTypes.PIECES.king);\r\n        this.isCheck = false;\r\n    }\r\n\r\n    /**\r\n     * @function availableMovements = Retorna los posibles movimientos que puede realizar la pieza King\r\n     * @param {Array<Integer>} position = Coordenadas de la celda donde se encuentra la pieza King\r\n     * @param {Array<Integer>} boardMatrix = Tablero del juego\r\n     */\r\n     availableMovements(position, boardMatrix){\r\n        const [i, j] = position;\r\n\r\n        /* Recorremos el array de posibles movimientos */\r\n        for (let k = 0; k < this.directions.length; k++){\r\n            const iDir = this.directions[k][0];\r\n            const jDir = this.directions[k][1];\r\n            \r\n            /* Cogemos la celda de las diferentes direcciones que tiene el rey */\r\n            const cell = this.getCellFromCoords([i + (1 * iDir), j + (1 * jDir)], boardMatrix);\r\n\r\n            /* En caso de que haya celda y que la celda no contenga una pieza de nuestro color, indicamos que la celda es una celda válida */\r\n            if (cell && !(cell.piece && cell.piece.color == this.color)){\r\n\r\n                if (!this.isThreatCell([i + (1 * iDir), j + (1 * jDir)], boardMatrix)) cell.setAvailableMovement(true);\r\n            } \r\n\r\n        }\r\n\r\n        if (this.moved) return;\r\n\r\n        /* Enroque blanco */\r\n\r\n        /* Celda de enroque corto */\r\n        const cellCastleKingShort = this.getCellFromCoords([i + 2, j], boardMatrix);\r\n\r\n        /* Celda de torre enroque corto */\r\n        const cellCastleShortRook = this.getCellFromCoords([i + 3, j], boardMatrix);\r\n\r\n        /* En caso de que la celda donde debe encontrarse se haya movido no entramos en la condición */\r\n        if (cellCastleShortRook.piece && !cellCastleShortRook.moved){\r\n            if (cellCastleKingShort && !(cellCastleKingShort.piece && cellCastleKingShort.piece.color == this.color)) \r\n                cellCastleKingShort.setAvailableMovement(true);\r\n        }\r\n        \r\n        \r\n        /* Enroque largo */\r\n\r\n        /* Celda de enroque largo */\r\n        const cellCastleKingLong = this.getCellFromCoords([i - 2, j], boardMatrix);\r\n\r\n        /* Celda de torre enroque largo */\r\n        const cellCastleLongRook = this.getCellFromCoords([i - 4, j], boardMatrix);\r\n        \r\n        /* En caso de que la celda donde debe encontrarse se haya movido no entramos en la condición */\r\n        if (cellCastleLongRook.piece && !cellCastleLongRook.moved){\r\n            if (cellCastleKingLong && !(cellCastleKingLong.piece && cellCastleKingLong.piece.color == this.color)) \r\n                cellCastleKingLong.setAvailableMovement(true);\r\n        } \r\n    }\r\n\r\n    /**\r\n     * @function isThreatCell = indica si la casilla a la que se puede desplazar el rey se encuentra amenazada\r\n     * @param {Array<integer, integer>} position = posición de la celda a la que se puede desplazar el rey\r\n     * @param {Array<integer, integer>} boardMatrix = tablero\r\n     */\r\n    isThreatCell(position, boardMatrix){\r\n\r\n        const [i, j] = position;\r\n\r\n        for (let l = 0; l < this.directions.length; l++){ \r\n\r\n            /* Definimos la dirección hacia la que tenemos que mirar si alguna pieza amenaza la casilla */\r\n            const iDir = this.directions[l][0];\r\n            const jDir = this.directions[l][1];\r\n\r\n            for (let k = 1; k < boardMatrix.length; k++){\r\n\r\n                /* De esta manera podemos definir la direccion al multiplicarla por el parametro de la direccion */\r\n                const cell = this.getCellFromCoords([i + (k * iDir), j + (k * jDir)], boardMatrix);                \r\n\r\n                /* Si no es una celda salimos del bucle */\r\n                if (!cell) break;\r\n\r\n                /* Si hay una pieza en la celda del mismo color que el rey actual salimos del bucle */\r\n                if (cell.piece && cell.piece.color == this.color) break;\r\n                \r\n                /* Cuando l valga de 0 a 3 comprobará las diagonales */\r\n                if (l == 0 || l == 1 || l == 2 || l == 3){\r\n\r\n                    /* En caso de que la pieza que encontremos sea un alfil o una reina, esa casilla estará amenazada */\r\n                    if(cell.piece){\r\n\r\n                        /* Si hay una reina o un alfil en la diagonal la celda está amenazada */\r\n                        if (cell.piece.type == PieceTypes.PIECES.queen || cell.piece.type == PieceTypes.PIECES.bishop){\r\n\r\n                            return true;\r\n\r\n                        } else {\r\n\r\n                            break;\r\n                        }\r\n\r\n                    }\r\n                \r\n                /* Cuando l valga de 4 a 7 comprobará las lineas verticales y horizontales */\r\n                } else if (l == 4 || l == 5 || l == 6 || l == 7) {\r\n\r\n                    /* En caso de que la pieza que encontremos sea una torre o una reina, esa casilla estará amenazada */\r\n                    if(cell.piece){\r\n\r\n                        /* Si hay una torre o un alfil en la diagonal la celda está amenazada */\r\n                        if (cell.piece.type == PieceTypes.PIECES.queen || cell.piece.type == PieceTypes.PIECES.rook){\r\n\r\n                            return true;\r\n\r\n                        } else {\r\n\r\n                            break;\r\n                        }\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n            \r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport {King}","import {socket} from './socket.js'\r\nimport {Board} from './classes/Board.js'\r\nimport {Pawn} from './classes/pieces/Pawn.js'\r\nimport {Rook} from './classes/pieces/Rook.js'\r\nimport {Knight} from './classes/pieces/Knight.js'\r\nimport {Bishop} from './classes/pieces/Bishop.js'\r\nimport {Queen} from './classes/pieces/Queen.js'\r\nimport {King} from './classes/pieces/King.js'\r\nimport {Color} from './types/Color.js';\r\n/*** VARIABLES CONSTANTES ***/\r\n\r\n    /**\r\n    * @type {integer} WIDTH_CANVAS = Anchura del canvas\r\n    * @type {integer} HEIGHT_CANVAS = Altura del canvas\r\n    */\r\n    const WIDTH_CANVAS = 800;\r\n    const HEIGHT_CANVAS = 700;\r\n\r\n    /**\r\n    * @type {integer} FILES = Filas del TABLERO\r\n    * @type {integer} RANKS = Columnas del TABLERO\r\n    */\r\n    const FILES = 8;\r\n    const RANKS = 8;\r\n\r\n/*** --VARIABLES CONSTANTES-- ***/\r\n\r\n/*** THEMES ***/\r\n\r\n    /**\r\n    * @type {Object} theme = Themes para nuestro tablero\r\n    * @type {{light: string, dark: string}}\r\n    */\r\n    const theme = {\r\n        light: '#eeeed2',\r\n        dark: '#769656'\r\n    }\r\n\r\n    /**\r\n    * @type {Object} pieceTheme = Themes para piezas Ajedrez\r\n    * @type {{light: string, dark: string}}\r\n    */\r\n    const pieceTheme = {\r\n        light: '#FFFFFF',\r\n        dark: '#000000'\r\n    }\r\n\r\n/*** --THEMES-- ***/\r\n\r\n/*** Inicializacion de la clase Board ***/\r\nconst board = new Board(WIDTH_CANVAS, HEIGHT_CANVAS, FILES, RANKS, theme, pieceTheme);\r\n/*** --Inicializacion de la clase Board ***/\r\n\r\n/*** FUNCIONES ***/\r\n\r\n    /**\r\n    * @function printPawns = Pinta los peones del tablero \r\n    */\r\n   function printPawns(){\r\n        for (let i = 0; i < RANKS; i++){\r\n            board.initPlacePiece(i, 1, new Pawn(Color.THEME.dark));\r\n\r\n            board.initPlacePiece(i, 6, new Pawn(Color.THEME.light));\r\n        }\r\n   }\r\n\r\n    /**\r\n    * @function printPieces = Pinta las piezas del tablero \r\n    */\r\n    function printPieces(){\r\n        for (let i = 0; i < 2; i++){\r\n            /* Si 'i' es mayor que 0 entonces pintamos las piezas de color Blanco */\r\n            board.initPlacePiece(0, i * 7, new Rook(i > 0 ? Color.THEME.light : Color.THEME.dark));\r\n            board.initPlacePiece(7, i * 7, new Rook(i > 0 ? Color.THEME.light : Color.THEME.dark));\r\n            board.initPlacePiece(2, i * 7, new Bishop(i > 0 ? Color.THEME.light : Color.THEME.dark));\r\n            board.initPlacePiece(5, i * 7, new Bishop(i > 0 ? Color.THEME.light : Color.THEME.dark));\r\n            board.initPlacePiece(1, i * 7, new Knight(i > 0 ? Color.THEME.light : Color.THEME.dark));\r\n            board.initPlacePiece(6, i * 7, new Knight(i > 0 ? Color.THEME.light : Color.THEME.dark));\r\n            board.initPlacePiece(3, i * 7, new Queen(i > 0 ? Color.THEME.light : Color.THEME.dark));\r\n            board.initPlacePiece(4, i * 7, new King(i > 0 ? Color.THEME.light : Color.THEME.dark));\r\n        }\r\n    }\r\n\r\n/*** --FUNCIONES-- ***/\r\n\r\n/* Pintamos las piezas */\r\nprintPawns();\r\nprintPieces();\r\n\r\n/* Renderizamos el tablero */\r\nboard.renderBoard();\r\n\r\n\r\n\r\n\r\n\r\n\r\n","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}